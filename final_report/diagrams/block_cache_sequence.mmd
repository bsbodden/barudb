sequenceDiagram
    participant Client as Client Code
    participant BlockCache as Block Cache
    participant EvictionPolicy as Eviction Policy
    participant TTLManager as TTL Manager
    participant Storage as Storage Layer
    
    %% Define participant boxes with consistent colors
    rect rgba(144, 238, 144, 0.3)
        note right of BlockCache: Cache components
        note right of EvictionPolicy: Policy components
        note right of TTLManager: TTL components
    end
    rect rgba(255, 165, 0, 0.3)
        note right of Storage: Storage components
    end
    
    %% Block cache operations
    Client->>+BlockCache: get_block(block_id)
    
    %% Check if block is in cache
    BlockCache->>BlockCache: lookup(block_id)
    
    alt block found in cache
        %% Update access statistics
        BlockCache->>+EvictionPolicy: record_access(block_id)
        EvictionPolicy-->>-BlockCache: updated_metadata
        
        %% Check if TTL expired
        BlockCache->>+TTLManager: is_expired(block_id)
        
        alt block expired
            TTLManager-->>-BlockCache: true
            BlockCache->>BlockCache: remove_from_cache(block_id)
            
            %% Load from storage
            BlockCache->>+Storage: read_block(block_id)
            Storage-->>-BlockCache: block_data
            
            %% Insert back with refreshed TTL
            BlockCache->>TTLManager: set_expiry(block_id, now + ttl)
            BlockCache->>EvictionPolicy: add_entry(block_id)
            
            BlockCache-->>-Client: block_data
        else block not expired
            TTLManager-->>-BlockCache: false
            BlockCache-->>-Client: cached_block_data
        end
    else block not found in cache
        %% Load from storage
        BlockCache->>+Storage: read_block(block_id)
        Storage-->>-BlockCache: block_data
        
        %% Check if cache is full
        BlockCache->>+EvictionPolicy: is_cache_full()
        
        alt cache full - need eviction
            EvictionPolicy-->>-BlockCache: true
            
            %% Policy determines what to evict
            BlockCache->>+EvictionPolicy: select_victim()
            
            alt using LRU policy
                note right of EvictionPolicy: Least Recently Used block selected
            else using LFU policy
                note right of EvictionPolicy: Least Frequently Used block selected
            else using TinyLFU policy
                note right of EvictionPolicy: Frequency sketch determines victim
            end
            
            EvictionPolicy-->>-BlockCache: victim_block_id
            
            %% Evict the selected block
            BlockCache->>BlockCache: evict_block(victim_block_id)
            BlockCache->>TTLManager: remove_expiry(victim_block_id)
        else cache has space
            EvictionPolicy-->>-BlockCache: false
        end
        
        %% Insert new block
        BlockCache->>BlockCache: insert_block(block_id, block_data)
        BlockCache->>+EvictionPolicy: add_entry(block_id)
        EvictionPolicy-->>-BlockCache: success
        BlockCache->>+TTLManager: set_expiry(block_id, now + ttl)
        TTLManager-->>-BlockCache: success
        
        BlockCache-->>-Client: block_data
    end
    
    %% Periodic TTL cleanup (background task)
    loop TTL cleanup interval
        TTLManager->>TTLManager: check_expired_entries()
        
        loop For each expired entry
            TTLManager->>BlockCache: notify_expired(block_id)
            BlockCache->>BlockCache: remove_from_cache(block_id)
            BlockCache->>EvictionPolicy: remove_entry(block_id)
        end
    end