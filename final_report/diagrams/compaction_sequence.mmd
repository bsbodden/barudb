sequenceDiagram
    participant LsmTree as LsmTree
    participant CompactionPolicy as Compaction Policy
    participant CompactionManager as Compaction Manager
    participant SourceLevel as Source Level(s)
    participant TargetLevel as Target Level
    participant Run as Run
    participant MergeIterator as Merge Iterator
    participant BloomBuilder as Bloom Filter Builder
    participant FPBuilder as Fence Pointer Builder
    
    %% Define participant boxes with consistent colors
    rect rgba(144, 238, 144, 0.3)
        note right of LsmTree: Tree components
    end
    rect rgba(221, 160, 221, 0.3)
        note right of CompactionPolicy: Policy components
        note right of CompactionManager: Manager components
        note right of MergeIterator: Iterator components
    end
    rect rgba(255, 165, 0, 0.3)
        note right of SourceLevel: Level components
        note right of TargetLevel: Level components
        note right of Run: Run components
    end
    rect rgba(255, 255, 0, 0.3)
        note right of BloomBuilder: Filter components
    end
    rect rgba(255, 0, 0, 0.3)
        note right of FPBuilder: Index components
    end
    
    %% Compaction operation flow
    LsmTree->>+CompactionPolicy: select_compaction()
    
    note right of CompactionPolicy: Policy determines what to compact
    
    alt tiered compaction
        CompactionPolicy-->>-LsmTree: CompactionTask (merge all runs in level)
    else leveled compaction
        CompactionPolicy-->>-LsmTree: CompactionTask (merge some runs with next level)
    else partial compaction
        CompactionPolicy-->>-LsmTree: CompactionTask (merge subset of files)
    end
    
    LsmTree->>+CompactionManager: execute_compaction(task)
    
    critical Acquire compaction lock
        note right of CompactionManager: Prevent concurrent compactions of same level
        
        %% Read source runs
        CompactionManager->>+SourceLevel: get_runs_for_compaction()
        SourceLevel-->>-CompactionManager: source_runs
        
        %% Create merge iterator over all runs
        CompactionManager->>+MergeIterator: new(source_runs)
        
        %% Prepare output run
        CompactionManager->>+TargetLevel: prepare_new_run()
        TargetLevel-->>-CompactionManager: new_run
        
        %% Merge and write data
        loop While merge iterator has data
            CompactionManager->>+MergeIterator: next_batch()
            MergeIterator-->>-CompactionManager: key_value_batch
            
            %% Write batch to new run
            CompactionManager->>+Run: write_batch(key_value_batch)
            Run-->>-CompactionManager: block_ids
        end
        
        %% Build Bloom filter for new run
        CompactionManager->>+BloomBuilder: build(keys)
        BloomBuilder-->>-CompactionManager: bloom_filter
        CompactionManager->>Run: set_bloom_filter(bloom_filter)
        
        %% Build fence pointers for new run
        CompactionManager->>+FPBuilder: build(block_keys)
        FPBuilder-->>-CompactionManager: fence_pointers
        CompactionManager->>Run: set_fence_pointers(fence_pointers)
        
        %% Finalize the runs
        CompactionManager->>Run: finalize()
        
        %% Update level metadata
        CompactionManager->>SourceLevel: remove_runs(source_runs)
        CompactionManager->>TargetLevel: add_run(new_run)
        
        %% Write manifest update
        CompactionManager->>CompactionManager: write_manifest_update()
    end
    
    CompactionManager-->>-LsmTree: compaction complete
    
    %% Optionally trigger next compaction if needed
    LsmTree->>CompactionPolicy: check_next_compaction_needed()
    
    alt if more compaction needed
        LsmTree->>CompactionManager: schedule_next_compaction()
        note right of CompactionManager: Continues the compaction cascade if needed
    end